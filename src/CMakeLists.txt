set(PROJECT_NAME lspe)

aux_source_directory(. SOURCE_FILES)

add_library(${PROJECT_NAME} STATIC ${SOURCE_FILES})

target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/include)

include(GNUInstallDirs)
set(PROJECT_EXPORT_TARGETS ${PROJECT_NAME})
set(PROJECT_EXPORT_NAME ${PROJECT_NAME})
set(PROJECT_INSTALL_CMAKEDIR ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_EXPORT_NAME})

foreach(target ${PROJECT_EXPORT_TARGETS})
	add_library(${PROJECT_EXPORT_NAME}::${target} ALIAS ${target})
endforeach()

install(
	TARGETS ${PROJECT_EXPORT_TARGETS}
	EXPORT ${PROJECT_EXPORT_NAME}Targets
	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

install(
	DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

export(
	EXPORT ${PROJECT_EXPORT_NAME}Targets
	NAMESPACE ${PROJECT_EXPORT_NAME}::
	FILE ${PROJECT_EXPORT_NAME}Targets.cmake
)
install(
	FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_EXPORT_NAME}Targets.cmake
	DESTINATION ${PROJECT_INSTALL_CMAKEDIR}
)

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
	${PROJECT_EXPORT_NAME}ConfigVersion.cmake
	VERSION ${PROJECT_VERSION}
	COMPATIBILITY AnyNewerVersion
)
install(
	FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_EXPORT_NAME}ConfigVersion.cmake
	DESTINATION ${PROJECT_INSTALL_CMAKEDIR}
)

install(
	EXPORT ${PROJECT_EXPORT_NAME}Targets
	FILE ${PROJECT_EXPORT_NAME}Config.cmake
	NAMESPACE ${PROJECT_EXPORT_NAME}::
	DESTINATION ${PROJECT_INSTALL_CMAKEDIR}
)
